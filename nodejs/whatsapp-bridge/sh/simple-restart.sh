#!/bin/bash

# Script de red√©marrage simple du service WhatsApp
# Utilise les sessions d√©j√† sauvegard√©es dans le fichier JSON

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# R√©pertoires et fichiers
SERVICE_DIR="/home/douglas/Documents/AfrikSolutions/Projects/web-whatsapp/nodejs/whatsapp-bridge"
PID_FILE="$SERVICE_DIR/service.pid"
SESSION_FILE="$SERVICE_DIR/src/data/active_sessions.json"

echo -e "${BLUE}=== Red√©marrage Simple du Service WhatsApp ===${NC}"
echo ""

# V√©rifier les sessions existantes
echo -e "${YELLOW}üì± V√©rification des sessions existantes...${NC}"
if [ -f "$SESSION_FILE" ]; then
    session_count=$(cat "$SESSION_FILE" | jq '. | length' 2>/dev/null || echo "0")
    echo -e "${GREEN}‚úÖ $session_count sessions trouv√©es dans le fichier${NC}"
    
    # Afficher un aper√ßu des sessions
    echo -e "${BLUE}Sessions disponibles:${NC}"
    cat "$SESSION_FILE" | jq -r 'to_entries[] | "  - \(.key): \(.value.phoneNumber // "N/A") (\(.value.status))"' 2>/dev/null || echo "  Erreur lors de la lecture du fichier"
else
    echo -e "${RED}‚ö†Ô∏è Aucun fichier de sessions trouv√©${NC}"
    echo -e "${YELLOW}Les sessions devront √™tre recr√©√©es apr√®s le red√©marrage${NC}"
fi

echo ""
echo -e "${YELLOW}‚ö†Ô∏è Ce script va red√©marrer le service WhatsApp.${NC}"
echo -e "${YELLOW}Les sessions seront restaur√©es automatiquement depuis le fichier JSON.${NC}"
echo ""
echo -e "${YELLOW}Continuer ? (y/N)${NC}"
read -r confirmation

if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
    echo -e "${RED}Arr√™t du red√©marrage${NC}"
    exit 1
fi

echo -e "${BLUE}D√©but du processus de red√©marrage${NC}"

# Fonction pour arr√™ter le service
stop_service() {
    echo -e "${YELLOW}üõë Arr√™t du service...${NC}"
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo -e "${BLUE}Envoi du signal SIGTERM au processus $PID...${NC}"
            kill -TERM "$PID"
            
            # Attendre que le processus se termine (max 10 secondes)
            for i in {1..10}; do
                if ! kill -0 "$PID" 2>/dev/null; then
                    echo -e "${GREEN}‚úÖ Service arr√™t√© proprement${NC}"
                    rm -f "$PID_FILE"
                    return 0
                fi
                echo -e "${BLUE}Attente de l'arr√™t... ($i/10)${NC}"
                sleep 1
            done
            
            # Si le processus ne s'arr√™te pas, forcer l'arr√™t
            echo -e "${YELLOW}Force l'arr√™t du processus...${NC}"
            kill -KILL "$PID" 2>/dev/null
            rm -f "$PID_FILE"
            echo -e "${GREEN}‚úÖ Service arr√™t√© (forc√©)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Processus d√©j√† arr√™t√©${NC}"
            rm -f "$PID_FILE"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Aucun fichier PID trouv√©${NC}"
        # Chercher et tuer les processus Node.js restants
        pkill -f "node.*src/server.js" && echo -e "${GREEN}‚úÖ Processus Node.js arr√™t√©s${NC}"
    fi
}

# Fonction pour d√©marrer le service
start_service() {
    echo -e "${YELLOW}üöÄ D√©marrage du service...${NC}"
    
    cd "$SERVICE_DIR" || {
        echo -e "${RED}‚ùå Impossible d'acc√©der au r√©pertoire $SERVICE_DIR${NC}"
        exit 1
    }
    
    # D√©marrer le service en arri√®re-plan
    nohup node src/server.js > logs/service.log 2>&1 &
    SERVICE_PID=$!
    
    # Sauvegarder le PID
    echo "$SERVICE_PID" > "$PID_FILE"
    
    echo -e "${GREEN}‚úÖ Service d√©marr√© avec PID $SERVICE_PID${NC}"
    
    # Attendre un peu pour que le service s'initialise
    echo -e "${BLUE}Attente de l'initialisation...${NC}"
    sleep 3
}

# Fonction pour v√©rifier que le service fonctionne
verify_service() {
    echo -e "${YELLOW}üîç V√©rification du service...${NC}"
    
    # V√©rifier que le processus tourne
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Processus en cours d'ex√©cution (PID: $PID)${NC}"
        else
            echo -e "${RED}‚ùå Processus non trouv√©${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Fichier PID non trouv√©${NC}"
        return 1
    fi
    
    # V√©rifier que l'API r√©pond
    echo -e "${BLUE}Test de l'API...${NC}"
    for i in {1..5}; do
        if curl -s http://localhost:3000/api/status > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ API accessible${NC}"
            return 0
        fi
        echo -e "${BLUE}Tentative $i/5 - Attente de l'API...${NC}"
        sleep 2
    done
    
    echo -e "${YELLOW}‚ö†Ô∏è API non accessible, mais le service semble d√©marr√©${NC}"
    return 0
}

# Ex√©cution du red√©marrage
stop_service
echo ""
start_service
echo ""
verify_service

echo ""
echo -e "${GREEN}üéâ Red√©marrage termin√© !${NC}"
echo ""
echo -e "${BLUE}Prochaines √©tapes:${NC}"
echo -e "  1. Les sessions vont se reconnecter automatiquement"
echo -e "  2. V√©rifiez les logs: tail -f logs/service.log"
echo -e "  3. V√©rifiez les logs de messages pour tester la s√©paration:"
echo -e "     - Messages entrants: tail -f logs/incoming-messages.log"
echo -e "     - Messages sortants: tail -f logs/outgoing-messages.log"
echo ""
