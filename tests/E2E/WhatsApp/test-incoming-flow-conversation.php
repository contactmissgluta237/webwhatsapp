<?php

declare(strict_types=1);

require_once __DIR__.'/BaseTestIncomingMessage.php';

/**
 * Test de flow de conversation multi-messages
 */
class TestConversationFlow extends BaseTestIncomingMessage
{
    private array $conversationMessages = [
        'Bonsoir boss.',
        'Svp pouvez vous cr√©er un site de pari sportif en ligne?',
        'avez vous d√©j√† int√©gr√© mobile money, paypal dans des projets ?',
        'cmobien √ßa peut me co√ªter ,et en combien de temps ?',
        'puis je avoir vos r√©alisations ?',
    ];

    private int $currentMessageIndex = 0;
    private array $conversationResponses = [];

    public function __construct()
    {
        parent::__construct('Test Flow Conversation Multi-Messages');
    }

    /**
     * Remplace runTest() pour g√©rer la conversation compl√®te
     */
    public function runTest(): void
    {
        $this->logTestStart();

        try {
            // 1. V√©rification de la configuration AI
            $this->verifyAIConfiguration();

            // 2. Cr√©ation d'un compte WhatsApp de test
            $this->createTestWhatsAppAccount();

            // 3. Configuration sp√©cifique du test
            $this->setupTestSpecificData();

            // 4. Envoi de tous les messages de la conversation
            foreach ($this->conversationMessages as $index => $message) {
                $this->currentMessageIndex = $index;
                $this->log('üí¨ Message '.($index + 1).'/'.count($this->conversationMessages).": \"$message\"");

                // Utiliser la logique de BaseTestIncomingMessage mais avec le message actuel
                $this->webhookData['message']['body'] = $message;
                $this->webhookData['message']['id'] = 'msg_'.uniqid();

                $response = $this->sendWebhookRequest();
                $this->analyzeResponse($response);
                $this->conversationResponses[] = $response;

                // Afficher la r√©ponse de l'IA
                if (isset($response['response_message'])) {
                    $this->log('ü§ñ R√©ponse IA '.($index + 1).': "'.$response['response_message'].'"');
                }

                $this->performValidationForMessage($index + 1, $message, $response);

                // Petit d√©lai pour simuler une vraie conversation
                sleep(1);
            }

            // 5. Validation globale de la conversation
            $this->performTestSpecificValidations([]);

            $this->logTestSuccess();

        } catch (Exception $e) {
            $this->logTestError($e);
        } finally {
            $this->cleanupTestData();
        }
    }

    /**
     * Valide la r√©ponse pour chaque message.
     * Cette m√©thode est sp√©cifique √† ce test et remplace performTestSpecificValidations globale.
     */
    protected function performValidationForMessage(int $messageIndex, string $sentMessage, array $response): void
    {
        // Validation g√©n√©rique: v√©rifier la pr√©sence du message de r√©ponse
        if (! isset($response['response_message']) || empty($response['response_message'])) {
            throw new Exception('Message de r√©ponse manquant pour le message '.$messageIndex);
        }
        $this->log('‚úÖ Validation message '.$messageIndex.': Message de r√©ponse pr√©sent.');

        // Ajoutez ici des validations sp√©cifiques pour chaque message si n√©cessaire
        switch ($messageIndex) {
            case 1:
                // Validation pour "Bonsoir boss."
                // Ex: V√©rifier que la r√©ponse est une salutation ou une demande de plus d'informations.
                break;
            case 2:
                // Validation pour "Svp pouvez vous cr√©er un site de pari sportif en ligne?"
                // Ex: V√©rifier que la r√©ponse mentionne la faisabilit√© ou demande des d√©tails.
                break;
            case 3:
                // Validation pour "avez vous d√©j√† int√©gr√© mobile money, paypal dans des projets ?"
                // Ex: V√©rifier que la r√©ponse confirme ou non l'int√©gration de ces m√©thodes.
                break;
            case 4:
                // Validation pour "cmobien √ßa peut me co√ªter ,et en combien de temps ?"
                // Ex: V√©rifier que la r√©ponse parle de devis ou de d√©lais.
                break;
            case 5:
                // Validation pour "puis je avoir vos r√©alisations ?"
                // Ex: V√©rifier que la r√©ponse propose d'envoyer des r√©alisations ou un portfolio.
                break;
        }
    }

    /**
     * Pas de message de test unique pour ce test de conversation.
     * La m√©thode runTest g√®re l'envoi des messages.
     */
    protected function getTestMessage(): string
    {
        return ''; // Non utilis√© pour ce type de test
    }

    /**
     * Validations sp√©cifiques globales apr√®s toute la conversation
     */
    protected function performTestSpecificValidations(array $response): void
    {
        $this->log('üìä Validation de la conversation compl√®te...');

        // V√©rifier que tous les messages ont re√ßu une r√©ponse
        if (count($this->conversationResponses) !== count($this->conversationMessages)) {
            throw new Exception('Nombre de r√©ponses incorrect: '.count($this->conversationResponses).' vs '.count($this->conversationMessages));
        }

        // V√©rifier que chaque r√©ponse montre une compr√©hension contextuelle
        $this->validateContextualUnderstanding();

        $this->log('‚úÖ Validation conversation: Toutes les r√©ponses re√ßues');
        $this->log('‚úÖ Validation conversation: Contexte maintenu sur '.count($this->conversationMessages).' messages');
    }

    /**
     * Valide que l'IA maintient le contexte √† travers la conversation
     */
    private function validateContextualUnderstanding(): void
    {
        // Analyser si les r√©ponses 2-5 font r√©f√©rence au contexte pr√©c√©dent
        for ($i = 1; $i < count($this->conversationResponses); $i++) {
            $response = $this->conversationResponses[$i];
            $message = strtolower($response['response_message'] ?? '');

            // Pour les messages 2-5, v√©rifier qu'il y a une continuit√© contextuelle
            switch ($i + 1) {
                case 2: // Apr√®s "Svp pouvez vous cr√©er un site de pari sportif en ligne?"
                    if (! str_contains($message, 'pari') && ! str_contains($message, 'site') && ! str_contains($message, 'sport')) {
                        $this->log('‚ö†Ô∏è R√©ponse 2 pourrait manquer de contexte pari sportif');
                    } else {
                        $this->log('‚úÖ R√©ponse 2: Contexte pari sportif maintenu');
                    }
                    break;

                case 3: // Apr√®s "avez vous d√©j√† int√©gr√© mobile money, paypal dans des projets ?"
                    if (! str_contains($message, 'paiement') && ! str_contains($message, 'int√©gr') && ! str_contains($message, 'projet')) {
                        $this->log('‚ö†Ô∏è R√©ponse 3 pourrait manquer de contexte int√©grations');
                    } else {
                        $this->log('‚úÖ R√©ponse 3: Contexte int√©grations maintenu');
                    }
                    break;

                case 4: // Apr√®s "combien √ßa peut me co√ªter ,et en combien de temps ?"
                    if (! str_contains($message, 'prix') && ! str_contains($message, 'co√ªt') && ! str_contains($message, 'temps') && ! str_contains($message, 'd√©lai')) {
                        $this->log('‚ö†Ô∏è R√©ponse 4 pourrait manquer de contexte devis');
                    } else {
                        $this->log('‚úÖ R√©ponse 4: Contexte devis maintenu');
                    }
                    break;

                case 5: // Apr√®s "puis je avoir vos r√©alisations ?"
                    if (! str_contains($message, 'r√©alisation') && ! str_contains($message, 'portfolio') && ! str_contains($message, 'projet')) {
                        $this->log('‚ö†Ô∏è R√©ponse 5 pourrait manquer de contexte r√©alisations');
                    } else {
                        $this->log('‚úÖ R√©ponse 5: Contexte r√©alisations maintenu');
                    }
                    break;
            }
        }
    }

    /**
     * Configuration sp√©cifique pour le test de conversation.
     */
    protected function setupTestSpecificData(): void
    {
        $this->log('üìã Configuration test de conversation.');
        // Ajoutez ici toute configuration n√©cessaire avant le d√©but de la conversation
    }

    /**
     * Nettoyage sp√©cifique pour le test de conversation.
     */
    protected function performTestSpecificCleanup(): void
    {
        $this->log('üßπ Nettoyage apr√®s test de conversation.');
        // Ajoutez ici toute op√©ration de nettoyage apr√®s la conversation
    }
}

// Ex√©cution du test
try {
    $tester = new TestConversationFlow;
    $tester->runTest();
} catch (Exception $e) {
    echo '‚ùå Erreur fatale: '.$e->getMessage().PHP_EOL;
    exit(1);
}
