<?php

declare(strict_types=1);

namespace Tests\E2E\Billing;

use App\Models\WhatsAppAccountUsage;
use App\Services\WhatsApp\Helpers\MessageBillingHelper;

/**
 * Test E2E pour le d√©bit wallet quand l'utilisateur n'a plus de quota
 *
 * Ce test utilise la vraie base de donn√©es et v√©rifie :
 * - Customer avec quota √©puis√© mais wallet charg√©
 * - D√©bit automatique du wallet pour les messages en d√©passement
 * - Notifications de d√©bit wallet envoy√©es
 * - Logs de d√©bit wallet g√©n√©r√©s
 */
class WalletDebitE2ETest extends BaseE2EBillingTest
{
    protected function setUp(): void
    {
        parent::setUp();

        // √âpuiser le quota d√®s le d√©but pour ce test
        $this->exhaustCustomerQuota();
    }

    /**
     * √âpuise compl√®tement le quota du customer pour simuler un d√©passement
     */
    private function exhaustCustomerQuota(): void
    {
        $accountUsage = WhatsAppAccountUsage::getOrCreateForAccount($this->subscription, $this->whatsappAccount);

        // Marquer tout le quota comme utilis√© (100 messages)
        $accountUsage->update([
            'messages_used' => $this->subscription->messages_limit, // 100
            'base_messages_count' => $this->subscription->messages_limit,
            'last_message_at' => now()->subMinutes(10),
        ]);

        echo "üîÑ Quota √©puis√©: {$this->subscription->messages_limit} messages utilis√©s\n";
    }

    /**
     * Test: Customer sans quota mais avec wallet suffisant - D√©bit automatique
     *
     * Sc√©nario:
     * - Customer avec 0 messages restants dans son quota
     * - Wallet avec 1000 XAF (suffisant)
     * - Envoi d'une r√©ponse complexe (AI + 3 produits + 6 m√©dias) = 10 messages = 75 XAF
     * - V√©rification que 75 XAF sont d√©bit√©s du wallet
     * - Notification WalletDebitedNotification envoy√©e
     * - Logs de d√©bit wallet pr√©sents
     */
    public function test_wallet_debit_with_sufficient_funds(): void
    {
        // ============================================================
        // SETUP: V√©rifier l'√©tat initial (quota √©puis√©)
        // ============================================================
        echo "\nüîç [E2E] V√©rification √©tat initial (quota √©puis√©)...\n";

        $initialWalletBalance = $this->wallet->balance; // 1000.00
        $remainingMessages = $this->subscription->getRemainingMessages(); // 0
        $accountUsage = $this->getFreshAccountUsage();

        $this->assertEquals(0, $remainingMessages, '‚ùå Le quota devrait √™tre √©puis√©');
        $this->assertEquals(100, $accountUsage->messages_used, '‚ùå Tous les messages devraient √™tre utilis√©s');

        echo "‚úÖ Customer: {$this->customer->email}\n";
        echo "‚úÖ Quota restant: {$remainingMessages} messages (√©puis√©)\n";
        echo "‚úÖ Messages utilis√©s: {$accountUsage->messages_used}/100\n";
        echo "‚úÖ Wallet balance: {$initialWalletBalance} XAF\n";

        // ============================================================
        // ACTION: G√©n√©rer et dispatcher l'√©v√©nement
        // ============================================================
        echo "\nüì§ [E2E] G√©n√©ration et dispatch de l'√©v√©nement (d√©passement)...\n";

        $messageRequest = $this->generateMessageRequest('Montrez-moi encore des produits');
        $aiResponse = $this->generateComplexAIResponse();

        // Calculer le co√ªt attendu
        $expectedMessageCount = MessageBillingHelper::getNumberOfMessagesFromResponse($aiResponse);
        $expectedBillingAmount = MessageBillingHelper::getAmountToBillFromResponse($aiResponse);

        echo "üßÆ Messages calcul√©s: {$expectedMessageCount}\n";
        echo "üßÆ Co√ªt √† d√©biter: {$expectedBillingAmount} XAF\n";
        echo "üßÆ Balance wallet avant: {$initialWalletBalance} XAF\n";
        echo 'üßÆ Balance attendue apr√®s: '.($initialWalletBalance - $expectedBillingAmount)." XAF\n";

        // Dispatcher l'√©v√©nement
        echo "üöÄ Dispatch de MessageProcessedEvent...\n";
        $this->dispatchMessageProcessedEvent($messageRequest, $aiResponse);

        // ============================================================
        // VERIFICATION: √âtats apr√®s traitement
        // ============================================================
        echo "\nüîç [E2E] V√©rifications post-traitement (d√©bit wallet)...\n";

        // R√©cup√©rer les donn√©es fra√Æches
        $this->wallet->refresh();
        $accountUsage->refresh();

        // V√©rifier que le quota n'a PAS chang√© (toujours √©puis√©)
        $this->assertEquals(100, $accountUsage->messages_used,
            '‚ùå Les messages du quota ne devraient pas changer');
        echo "‚úÖ Messages quota inchang√©s: {$accountUsage->messages_used}\n";

        // V√©rifier que le wallet a √©t√© d√©bit√©
        $expectedNewBalance = $initialWalletBalance - $expectedBillingAmount;
        $this->assertEquals($expectedNewBalance, $this->wallet->balance,
            "‚ùå Wallet mal d√©bit√©. Attendu: {$expectedNewBalance}, Re√ßu: {$this->wallet->balance}");
        echo "‚úÖ Wallet d√©bit√©: {$initialWalletBalance} - {$expectedBillingAmount} = {$this->wallet->balance} XAF\n";

        // V√©rifier l'overage comptabilis√©
        $this->assertEquals($expectedBillingAmount, $accountUsage->overage_cost_paid_xaf,
            "‚ùå Overage cost incorrect. Attendu: {$expectedBillingAmount}, Re√ßu: {$accountUsage->overage_cost_paid_xaf}");
        echo "‚úÖ Overage cost: {$accountUsage->overage_cost_paid_xaf} XAF\n";

        // V√©rifier les timestamps
        $this->assertNotNull($accountUsage->last_message_at);
        $this->assertNotNull($accountUsage->last_overage_payment_at);
        echo "‚úÖ Timestamps overage mis √† jour\n";

        // ============================================================
        // LOGS VERIFICATION
        // ============================================================
        echo "\nüìã [E2E] Informations pour v√©rification manuelle des logs...\n";
        echo "üîç Rechercher dans les logs:\n";
        echo "   - '[BillingCounterListener] Processing billing'\n";
        echo "   - '[BillingCounterListener] Wallet debited and notification sent'\n";
        echo "   - '[WhatsAppAccountUsage] Wallet debited for overage'\n";
        echo "   - user_id: {$this->customer->id}\n";
        echo "   - session_id: {$this->whatsappAccount->session_id}\n";
        echo "   - amount_debited: {$expectedBillingAmount}\n";
        echo "   - new_wallet_balance: {$this->wallet->balance}\n";

        // ============================================================
        // NOTIFICATIONS VERIFICATION
        // ============================================================
        echo "\nüìß [E2E] V√©rification notifications wallet d√©bit...\n";
        echo "üìß V√âRIFIER: Email WalletDebitedNotification envoy√© √† {$this->customer->email}\n";
        echo "üìß V√âRIFIER: Contenu email - Montant d√©bit√©: {$expectedBillingAmount} XAF\n";
        echo "üìß V√âRIFIER: Contenu email - Nouveau solde: {$this->wallet->balance} XAF\n";
        echo "üìß V√âRIFIER: Notification push WalletDebitedNotification\n";
        echo "üìß V√âRIFIER: Notification database cr√©√©e avec type 'whatsapp_wallet_debited'\n";

        // ============================================================
        // SUMMARY
        // ============================================================
        echo "\nüéâ [E2E] Test wallet debit - SUCCESS!\n";
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
        echo "üìä R√âSUM√â:\n";
        echo "   üë§ Customer: {$this->customer->email}\n";
        echo "   üì¶ Quota √©puis√©: 100/100 messages utilis√©s\n";
        echo "   üí≥ Wallet d√©bit√©: {$expectedBillingAmount} XAF\n";
        echo "   üí∞ Nouveau solde: {$this->wallet->balance} XAF\n";
        echo "   üìä Overage pay√©: {$accountUsage->overage_cost_paid_xaf} XAF\n";
        echo "   üìß Notifications: WalletDebitedNotification envoy√©e\n";
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
    }

    /**
     * Test: Customer sans quota et avec wallet insuffisant - Rejet de d√©bit
     */
    public function test_wallet_debit_with_insufficient_funds(): void
    {
        // ============================================================
        // SETUP: R√©duire le wallet √† un montant insuffisant
        // ============================================================
        echo "\nüîç [E2E] Test avec wallet insuffisant...\n";

        // Mettre seulement 50 XAF dans le wallet (insuffisant pour 75 XAF)
        $lowBalance = 50.0;
        $this->wallet->update(['balance' => $lowBalance]);

        $messageRequest = $this->generateMessageRequest('Encore des produits please');
        $aiResponse = $this->generateComplexAIResponse();

        $expectedBillingAmount = MessageBillingHelper::getAmountToBillFromResponse($aiResponse);

        echo "‚úÖ Wallet balance r√©duite: {$lowBalance} XAF\n";
        echo "üí∞ Co√ªt requis: {$expectedBillingAmount} XAF\n";
        echo "‚ùå Fonds insuffisants: {$lowBalance} < {$expectedBillingAmount}\n";

        // ============================================================
        // ACTION: Dispatcher l'√©v√©nement
        // ============================================================
        echo "\nüöÄ Dispatch avec fonds insuffisants...\n";
        $this->dispatchMessageProcessedEvent($messageRequest, $aiResponse);

        // ============================================================
        // VERIFICATION: Rien ne doit √™tre d√©bit√©
        // ============================================================
        echo "\nüîç V√©rifications fonds insuffisants...\n";

        $this->wallet->refresh();
        $accountUsage = $this->getFreshAccountUsage();

        // Le wallet ne doit PAS √™tre d√©bit√©
        $this->assertEquals($lowBalance, $this->wallet->balance,
            '‚ùå Wallet d√©bit√© malgr√© fonds insuffisants');
        echo "‚úÖ Wallet inchang√©: {$this->wallet->balance} XAF\n";

        // Aucun overage ne doit √™tre comptabilis√©
        $this->assertEquals(0.0, $accountUsage->overage_cost_paid_xaf,
            '‚ùå Overage comptabilis√© malgr√© √©chec de d√©bit');
        echo "‚úÖ Aucun overage comptabilis√©\n";

        // ============================================================
        // LOGS VERIFICATION
        // ============================================================
        echo "\nüìã [E2E] Logs √† v√©rifier pour fonds insuffisants...\n";
        echo "üîç Rechercher dans les logs:\n";
        echo "   - '[BillingCounterListener] Failed to debit wallet - insufficient funds'\n";
        echo "   - user_id: {$this->customer->id}\n";
        echo "   - required_amount: {$expectedBillingAmount}\n";
        echo "   - wallet_balance: {$this->wallet->balance}\n";

        echo "\nüìß [E2E] Notifications (ne devrait PAS y en avoir)...\n";
        echo "‚ùå V√âRIFIER: Aucun email WalletDebitedNotification envoy√©\n";
        echo "‚ùå V√âRIFIER: Aucune notification push\n";

        echo "\nüéâ Test fonds insuffisants - SUCCESS!\n";
    }

    /**
     * Test: Edge case - Wallet avec exactement le montant requis
     */
    public function test_wallet_debit_exact_amount(): void
    {
        echo "\nüîç [E2E] Test avec montant wallet exact...\n";

        // Calculer le co√ªt d'une r√©ponse simple et ajuster le wallet
        $simpleResponse = $this->generateSimpleAIResponse();
        $exactAmount = MessageBillingHelper::getAmountToBillFromResponse($simpleResponse); // 15 XAF

        $this->wallet->update(['balance' => $exactAmount]);

        echo "‚úÖ Wallet ajust√© √†: {$exactAmount} XAF (montant exact)\n";

        // Dispatcher
        $messageRequest = $this->generateMessageRequest('Simple question');
        $this->dispatchMessageProcessedEvent($messageRequest, $simpleResponse);

        // V√©rifier
        $this->wallet->refresh();
        $this->assertEquals(0.0, $this->wallet->balance,
            '‚ùå Le wallet devrait √™tre √† 0 apr√®s d√©bit exact');

        echo "‚úÖ Wallet apr√®s d√©bit exact: {$this->wallet->balance} XAF\n";
        echo "üéâ Test montant exact - SUCCESS!\n";
    }
}
