/**
 * Script de test pour le flux de produits WhatsApp via API HTTP
 * Simule une r√©ponse Laravel avec produits et teste l'envoi
 */

const axios = require('axios');
const TestData = require('./src/test/testData');

const API_BASE = 'http://localhost:3000';

async function testProductFlowViaAPI() {
    try {
        console.log("üöÄ Test de flux de produits via API HTTP\n");

        // 1. V√©rifier les sessions actives
        console.log("=".repeat(50));
        console.log("üì± V√©rification des sessions actives");
        console.log("=".repeat(50));
        
        const sessionsResponse = await axios.get(`${API_BASE}/api/sessions`);
        const sessionsData = sessionsResponse.data;
        const sessions = sessionsData.sessions || [];
        
        console.log(`Total sessions: ${sessions.length}`);
        
        const activeSessions = sessions.filter(s => s.status === 'connected');
        console.log(`Sessions actives: ${activeSessions.length}`);
        
        if (activeSessions.length === 0) {
            console.log("‚ùå Aucune session active trouv√©e");
            return;
        }
        
        activeSessions.forEach((session, index) => {
            console.log(`${index + 1}. ${session.sessionId} (${session.phoneNumber})`);
        });

        if (activeSessions.length < 2) {
            console.log("\n‚ö†Ô∏è Il faut 2 sessions pour tester entre elles");
            console.log("üí° On va tester en envoyant √† la premi√®re session");
        }

        // 2. Choisir session source et destination
        const fromSession = activeSessions[0];
        const toPhoneNumber = activeSessions.length > 1 ? activeSessions[1].phoneNumber : fromSession.phoneNumber;
        
        console.log(`\nüì§ Session source: ${fromSession.sessionId} (${fromSession.phoneNumber})`);
        console.log(`üì• Destination: ${toPhoneNumber}`);

        // 3. Simuler un message entrant avec une r√©ponse Laravel contenant des produits
        console.log("\n" + "=".repeat(50));
        console.log("üß™ Test d'envoi de produits");
        console.log("=".repeat(50));

        // Cr√©er payload avec produits de test
        const mockLaravelResponse = {
            success: true,
            processed: true,
            session_id: fromSession.sessionId,
            phone_number: fromSession.phoneNumber,
            response_message: "Voici quelques produits qui pourraient vous int√©resser :",
            wait_time_seconds: 1,
            typing_duration_seconds: 2,
            products: TestData.sampleProducts
        };

        console.log(`üì¶ Produits √† envoyer: ${mockLaravelResponse.products.length}`);
        console.log(`‚è±Ô∏è D√©lais configur√©s: 3s entre produits, 1.5s entre m√©dias`);

        // Simuler l'envoi direct des √©l√©ments de r√©ponse
        console.log("\n‚è≥ Envoi du message de r√©ponse IA...");
        
        const aiResponse = await axios.post(`${API_BASE}/api/bridge/send-message`, {
            session_id: fromSession.sessionId,
            to: toPhoneNumber,
            message: mockLaravelResponse.response_message
        });

        if (aiResponse.data.success) {
            console.log("‚úÖ Message IA envoy√© avec succ√®s");
        } else {
            console.log("‚ùå √âchec envoi message IA:", aiResponse.data.error);
            return;
        }

        // Attendre un peu avant d'envoyer les produits
        await new Promise(resolve => setTimeout(resolve, 2000));

        // 4. Envoyer chaque produit avec ses m√©dias
        console.log("\nüõçÔ∏è Envoi des produits...");
        
        for (let i = 0; i < mockLaravelResponse.products.length; i++) {
            const product = mockLaravelResponse.products[i];
            
            console.log(`\nüì¶ Produit ${i + 1}/${mockLaravelResponse.products.length}`);
            
            // Envoyer le message du produit
            console.log("   üìù Envoi du message produit...");
            const productResponse = await axios.post(`${API_BASE}/api/bridge/send-message`, {
                session_id: fromSession.sessionId,
                to: toPhoneNumber,
                message: product.formattedProductMessage
            });

            if (productResponse.data.success) {
                console.log("   ‚úÖ Message produit envoy√©");
            } else {
                console.log("   ‚ùå √âchec message produit:", productResponse.data.error);
                continue;
            }

            // Attendre avant d'envoyer les m√©dias
            if (product.mediaUrls.length > 0) {
                await new Promise(resolve => setTimeout(resolve, 300));
            }

            // Envoyer chaque m√©dia
            for (let j = 0; j < product.mediaUrls.length; j++) {
                const mediaUrl = product.mediaUrls[j];
                
                console.log(`   üìé Envoi m√©dia ${j + 1}/${product.mediaUrls.length}...`);
                
                try {
                    const mediaResponse = await axios.post(`${API_BASE}/api/bridge/send-message`, {
                        session_id: fromSession.sessionId,
                        to: toPhoneNumber,
                        message: mediaUrl
                    });

                    if (mediaResponse.data.success) {
                        console.log(`   ‚úÖ M√©dia ${j + 1} envoy√©`);
                    } else {
                        console.log(`   ‚ùå √âchec m√©dia ${j + 1}:`, mediaResponse.data.error);
                    }
                } catch (error) {
                    console.log(`   ‚ùå Erreur m√©dia ${j + 1}:`, error.message);
                }

                // D√©lai entre m√©dias (1.5s)
                if (j < product.mediaUrls.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1500));
                }
            }

            // D√©lai entre produits (3s)
            if (i < mockLaravelResponse.products.length - 1) {
                console.log(`   ‚è≥ Attente 3s avant le produit suivant...`);
                await new Promise(resolve => setTimeout(resolve, 3000));
            }
        }

        console.log("\n" + "=".repeat(50));
        console.log("üéâ Test termin√© avec succ√®s !");
        console.log("=".repeat(50));
        console.log(`üì± V√©rifie les messages sur: ${toPhoneNumber}`);
        console.log("üí° Tu devrais voir:");
        console.log("   - 1 message de r√©ponse IA");
        console.log(`   - ${mockLaravelResponse.products.length} messages de produits`);
        console.log(`   - ${mockLaravelResponse.products.reduce((total, p) => total + p.mediaUrls.length, 0)} m√©dias au total`);

    } catch (error) {
        console.error("‚ùå Erreur lors du test:", error.message);
        if (error.response) {
            console.error("Status:", error.response.status);
            console.error("Data:", error.response.data);
        }
    }
}

// Lancer le test
if (require.main === module) {
    testProductFlowViaAPI().then(() => {
        console.log("\nüëã Test termin√©");
        process.exit(0);
    }).catch((error) => {
        console.error("‚ùå Erreur fatale:", error);
        process.exit(1);
    });
}

module.exports = { testProductFlowViaAPI };